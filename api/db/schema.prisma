datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                         Int                          @id @default(autoincrement())
  username                   String                       @unique @default("")
  createdAt                  DateTime                     @default(now())
  hashedPassword             String                       @default("")
  salt                       String                       @default("")
  group                      String?
  submittedAt                DateTime?
  imageSurvey                ImageSurvey[]
  customerSatisfactionSurvey CustomerSatisfactionSurvey[]
  demographic                Demographic[]
}

model Image {
  id            Int           @id @default(autoincrement())
  imageNumber   Int           @unique
  imageLocation String
  dataLocation  String
  ImageSurvey   ImageSurvey[]
}

model ImageSurvey {
  id               Int     @id @default(autoincrement())
  privateRank      Int
  publicElem       String
  privateElem      String
  satisfactionRank Int?
  satisfactionElem String?
  user             User?   @relation(fields: [userId], references: [id])
  userId           Int?
  image            Image?  @relation(fields: [imageId], references: [id])
  imageId          Int?
  hasInterface     Boolean

  @@unique([userId, imageId, hasInterface])
}

model CustomerSatisfactionScore {
  id                         Int                          @id @default(autoincrement())
  rank                       Int
  justification              String
  CustomerSatisfactionSurvey CustomerSatisfactionSurvey[]
}

model NetPromoterScore {
  id                         Int                          @id @default(autoincrement())
  rank                       Int
  justification              String
  CustomerSatisfactionSurvey CustomerSatisfactionSurvey[]
}

model UserExperienceQuestionaireScore {
  id                         Int                          @id @default(autoincrement())
  support                    Int
  complexity                 Int
  efficiency                 Int
  clarity                    Int
  motivation                 Int
  interest                   Int
  norm                       Int
  originality                Int
  CustomerSatisfactionSurvey CustomerSatisfactionSurvey[]
}

model CustomerSatisfactionSurvey {
  id     Int                              @id @default(autoincrement())
  user   User                             @relation(fields: [userId], references: [id])
  userId Int
  csat   CustomerSatisfactionScore?       @relation(fields: [csatId], references: [id])
  csatId Int?
  nps    NetPromoterScore?                @relation(fields: [npsId], references: [id])
  npsId  Int?
  ueq    UserExperienceQuestionaireScore? @relation(fields: [ueqId], references: [id])
  ueqId  Int?

  @@unique([userId])

}

model Demographic {
  id          Int   @id @default(autoincrement())
  user        User  @relation(fields: [userId], references: [id])
  userId      Int
  age         Int
  education   Int
  technology  Int
  privacy     Int

  @@unique([userId])
}